'use client';

import { useState } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { ChefHat, Clock, Users, Star, Heart, ArrowLeft } from 'lucide-react';
import Header from '@/components/Header';
import Footer from '@/components/Footer';
import { Recipe } from '@/types';

export default function GeneratePage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const dishName = searchParams.get('dish_name') || '';
  
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedRecipe, setGeneratedRecipe] = useState<Recipe | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [dishInput, setDishInput] = useState(dishName);

  const generateRecipe = async (dishName: string) => {
    if (!dishName.trim()) {
      setError('Please enter a dish name');
      return;
    }

    setIsGenerating(true);
    setError(null);
    setGeneratedRecipe(null);

    try {
      const response = await fetch('https://sadia125.app.n8n.cloud/webhook-test/1ab6c403-184d-42b1-8d41-05f78652edc6', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          dish_name: dishName.trim(),
        }),
      });

      const data = await response.json();
      console.log('n8n response:', data);
      
      if (!response.ok) {
        throw new Error(data.error || 'Failed to generate recipe');
      }

      // Handle the response from n8n webhook
      // n8n returns data wrapped in an 'output' object
      const recipeData = data.output || data;
      
      if (recipeData.title && recipeData.ingredients) {
        setGeneratedRecipe({
          ...recipeData,
          id: `recipe_${Date.now()}`,
          created_at: new Date().toISOString(),
        });
      } else {
        // Fallback if n8n doesn't return expected structure
        setGeneratedRecipe({
          id: `recipe_${Date.now()}`,
          title: dishName,
          description: `A delicious ${dishName} recipe generated by AI`,
          ingredients: [
            { name: 'flour', amount: 2, unit: 'cups' },
            { name: 'sugar', amount: 1, unit: 'cup' },
            { name: 'eggs', amount: 3, unit: 'pieces' },
            { name: 'milk', amount: 0.5, unit: 'cup' }
          ],
          instructions: [
            'Step 1: Prepare the ingredients',
            'Step 2: Cook according to your preference',
            'Step 3: Serve and enjoy!'
          ],
          cooking_time: 30,
          difficulty: 'Medium',
          cuisine: 'International',
          dietary_tags: [],
          nutritional_info: {
            calories: 300,
            protein: 20,
            carbohydrates: 25,
            fat: 15,
          },
          servings: 4,
          created_at: new Date().toISOString(),
        });
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to generate recipe');
    } finally {
      setIsGenerating(false);
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    generateRecipe(dishInput);
  };

  const handleFavoriteToggle = (recipeId: string) => {
    // TODO: Implement favorite toggle functionality
    console.log('Toggle favorite:', recipeId);
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Back Button */}
        <button
          onClick={() => router.back()}
          className="flex items-center gap-2 text-gray-600 hover:text-gray-900 mb-6 transition-colors"
        >
          <ArrowLeft className="w-4 h-4" />
          Back
        </button>

        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            Generate Recipe
          </h1>
          <p className="text-gray-600">
            Enter a dish name and let AI create a delicious recipe for you
          </p>
        </div>

        {/* Recipe Generation Form */}
        <div className="card mb-8">
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label htmlFor="dish-name" className="block text-sm font-medium text-gray-700 mb-2">
                Dish Name
              </label>
              <input
                type="text"
                id="dish-name"
                value={dishInput}
                onChange={(e) => setDishInput(e.target.value)}
                placeholder="e.g., Chicken Tikka Masala, Pasta Carbonara, Chocolate Cake"
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                disabled={isGenerating}
              />
            </div>
            
            <button
              type="submit"
              disabled={isGenerating || !dishInput.trim()}
              className="w-full btn-primary flex items-center justify-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isGenerating ? (
                <>
                  <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  Generating Recipe...
                </>
              ) : (
                <>
                  <ChefHat className="w-5 h-5" />
                  Generate Recipe
                </>
              )}
            </button>
          </form>

          {error && (
            <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded-lg">
              <p className="text-red-700">{error}</p>
            </div>
          )}
        </div>

        {/* Generated Recipe */}
        {generatedRecipe && (
          <div className="card">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold text-gray-900">
                {generatedRecipe.title}
              </h2>
              <button
                onClick={() => handleFavoriteToggle(generatedRecipe.id)}
                className="p-2 text-gray-400 hover:text-red-500 transition-colors"
              >
                <Heart className="w-6 h-6" />
              </button>
            </div>

            <p className="text-gray-600 mb-6">
              {generatedRecipe.description}
            </p>

            {/* Recipe Meta */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
              <div className="flex items-center gap-2 text-gray-600">
                <Clock className="w-5 h-5" />
                <span>{generatedRecipe.cooking_time} min</span>
              </div>
              <div className="flex items-center gap-2 text-gray-600">
                <Users className="w-5 h-5" />
                <span>{generatedRecipe.servings} servings</span>
              </div>
              <div className="flex items-center gap-2 text-gray-600">
                <Star className="w-5 h-5" />
                <span>{generatedRecipe.difficulty}</span>
              </div>
              <div className="flex items-center gap-2 text-gray-600">
                <span className="text-2xl">{getCuisineEmoji(generatedRecipe.cuisine)}</span>
                <span>{generatedRecipe.cuisine}</span>
              </div>
            </div>

            {/* Ingredients */}
            <div className="mb-8">
              <h3 className="text-xl font-semibold text-gray-900 mb-4">Ingredients</h3>
              <ul className="space-y-2">
                {generatedRecipe.ingredients.map((ingredient, index) => (
                  <li key={index} className="flex items-start gap-3">
                    <span className="w-2 h-2 bg-primary-500 rounded-full mt-2 flex-shrink-0"></span>
                    <span className="text-gray-700">
                      {typeof ingredient === 'string' 
                        ? ingredient 
                        : `${ingredient.amount} ${ingredient.unit} ${ingredient.name}`
                      }
                    </span>
                  </li>
                ))}
              </ul>
            </div>

            {/* Instructions */}
            <div className="mb-8">
              <h3 className="text-xl font-semibold text-gray-900 mb-4">Instructions</h3>
              <ol className="space-y-4">
                {generatedRecipe.instructions.map((instruction, index) => (
                  <li key={index} className="flex gap-4">
                    <span className="w-8 h-8 bg-primary-500 text-white rounded-full flex items-center justify-center text-sm font-semibold flex-shrink-0">
                      {index + 1}
                    </span>
                    <span className="text-gray-700">{instruction}</span>
                  </li>
                ))}
              </ol>
            </div>

            {/* Dietary Tags */}
            {generatedRecipe.dietary_tags && generatedRecipe.dietary_tags.length > 0 && (
              <div className="mb-8">
                <h3 className="text-xl font-semibold text-gray-900 mb-4">Dietary Information</h3>
                <div className="flex flex-wrap gap-2">
                  {generatedRecipe.dietary_tags.map((tag, index) => (
                    <span
                      key={index}
                      className="px-3 py-1 bg-green-100 text-green-700 text-sm rounded-full"
                    >
                      {tag}
                    </span>
                  ))}
                </div>
              </div>
            )}

            {/* Nutritional Information */}
            <div>
              <h3 className="text-xl font-semibold text-gray-900 mb-4">Nutritional Information</h3>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="text-center p-3 bg-gray-50 rounded-lg">
                  <div className="text-2xl font-bold text-primary-600">
                    {generatedRecipe.nutritional_info.calories}
                  </div>
                  <div className="text-sm text-gray-600">Calories</div>
                </div>
                <div className="text-center p-3 bg-gray-50 rounded-lg">
                  <div className="text-2xl font-bold text-primary-600">
                    {generatedRecipe.nutritional_info.protein}g
                  </div>
                  <div className="text-sm text-gray-600">Protein</div>
                </div>
                <div className="text-center p-3 bg-gray-50 rounded-lg">
                  <div className="text-2xl font-bold text-primary-600">
                    {generatedRecipe.nutritional_info.carbohydrates}g
                  </div>
                  <div className="text-sm text-gray-600">Carbs</div>
                </div>
                <div className="text-center p-3 bg-gray-50 rounded-lg">
                  <div className="text-2xl font-bold text-primary-600">
                    {generatedRecipe.nutritional_info.fat}g
                  </div>
                  <div className="text-sm text-gray-600">Fat</div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
      
      <Footer />
    </div>
  );
}

// Helper function to get cuisine emoji
function getCuisineEmoji(cuisine: string): string {
  const emojiMap: { [key: string]: string } = {
    'Italian': '🍝',
    'Indian': '🍛',
    'Chinese': '🥢',
    'Mexican': '🌮',
    'Japanese': '🍱',
    'French': '🥖',
    'Thai': '🍜',
    'Mediterranean': '🥙',
    'American': '🍔',
    'Greek': '🥗',
    'Spanish': '🥘',
    'Korean': '🍲',
    'Vietnamese': '🍜',
    'Lebanese': '🥙',
    'Turkish': '🥙',
    'Moroccan': '🥘',
    'International': '🌍',
  };
  
  return emojiMap[cuisine] || '🍽️';
} 